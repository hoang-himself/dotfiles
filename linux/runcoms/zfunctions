#
# Functions.
#

function update-prompt {
  curl -SL https://starship.rs/install.sh | sh -s -- -f
}

function update-compose {
  curl -fSL "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o ~/.docker/cli-plugins/docker-compose
  chmod +x ~/.docker/cli-plugins/docker-compose
}

function ssh-hostgen {
  if [[ $# -ne 5 ]]; then
    echo 'ssh-hostgen <algorithm> <host> <hostname> <port> <user>'
    echo ''
    echo '            algorithm: ed25519, ecdsa, dsa, rsa'
    echo '            host:      alias that you use to access this host'
    echo '            hostname:  hostname of the host'
    echo '            port:      port of the host, usually 22'
    echo '            user:      user to login to the host'
    return 0
  fi

  local algorithm="$1"
  case "$algorithm" in
  ed25519)
    algorithm='ed25519'
    ;;
  ecdsa)
    algorithm='ecdsa -b 521'
    ;;
  dsa)
    algorithm='dsa'
    ;;
  rsa)
    algorithm='rsa -b 4096'
    ;;
  *)
    echo 'algorithm must be one of ed25519, ecdsa, dsa, rsa'
    return 1
    ;;
  esac
  local h="$2"
  local hostname="$3"
  local p="$4"
  if ! [[ $p =~ ^[0-9]+$ ]]; then
    echo "port must be an integer" >&2
    return 1
  fi
  local u="$5"

  ssh-keygen -t "$algorithm" -f "$HOME/.ssh/id_$1_$h" -C "$u@$hostname"

  cat <<EOF >>"$HOME/.ssh/config.d/$hostname"
Host $h
  HostName $hostname
  CanonicalizeHostname yes
  Port $p
  User $u
  IdentityFile ~/.ssh/id_$1_$h.pub
  IdentitiesOnly yes

EOF

  echo ''
  echo 'Add your new public key to the authorized_keys file of the host if possible'
  echo ''
  echo "cat $HOME/.ssh/id_$1_$h.pub | ssh $h 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys'"
}

function createtmp {
  echo "Saving current directory as \$CURDIR"
  CURDIR=$(pwd)
  TMPDIR=$(mktemp -d)
  echo "Going to \$TMPDIR: $TMPDIR"
  # shellcheck disable=SC2164
  cd "$TMPDIR"
}

function cleantmp {
  echo "Returning to $CURDIR"
  # shellcheck disable=SC2164
  cd "$CURDIR"
  echo "Cleaning up $TMPDIR"
  command rm -rf $TMPDIR
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Determine size of a file or total size of a directory
function fs {
  local arg=-sbh
  if [[ -n "$*" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* -- *
  fi
}
